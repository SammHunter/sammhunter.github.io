view(mosquitoFullData)
mosquitoFullData <- mosquitoFullData %>% mutate(Lifespan = if_else(Response < 20, "short",
if_else(Response =< 40, "medium",
mosquitoFullData <- mosquitoFullData %>% mutate(Lifespan = if_else(Response < 20, "short",
if_else(Response <= 40, "medium",
if_else(Response > 40, "long", "sad"))))
view(mosquitoFullData)
mosquitoFullData <- mosquitoFullData %>% mutate(Lifespan = if_else(Response < 20, "short",
if_else(Response <= 40, "medium", "long"))))
mosquitoFullData <- mosquitoFullData %>% mutate(Lifespan = if_else(Response < 20, "short",
if_else(Response <= 40, "medium", "long")))
view(mosquitoFullData)
#install the devtools package is you haven't already
library("devtools")
#install the devtools package is you haven't already
install.packages("devtools")
library(devtools)
?bigrquery
?bigrquery::bigrquery
??bigrquery
#install the devtools package is you haven't already
# install.packages("devtools")
library(devtools)
library(bigrquery)
#install the devtools package is you haven't already
# install.packages("devtools")
#
install.packages("bigrquery)
library(devtools)
library(bigrquery)
library(DBI)
??bigrquery
con <- dbConnect(
bigrquery::bigquery(),
project = "publicdata",
#install the devtools package is you haven't already
# install.packages("devtools")
#
install.packages("bigrquery)
library(devtools)
library(bigrquery)
library(DBI)
??bigrquery
con <- dbConnect(
bigrquery::bigquery(),
project = "publicdata",
#install the devtools package is you haven't already
# install.packages("devtools")
#
install.packages("bigrquery)
library(devtools)
library(bigrquery)
library(DBI)
??bigrquery
con <- dbConnect(
bigrquery::bigquery(),
project = "publicdata",
#install the devtools package is you haven't already
# install.packages("devtools")
#
install.packages("bigrquery)
library(devtools)
library(bigrquery)
library(DBI)
??bigrquery
con <- dbConnect(
bigrquery::bigquery(),
project = "publicdata",
#install the devtools package is you haven't already
# install.packages("devtools")
#
install.packages("bigrquery")
library(devtools)
library(bigrquery)
library(DBI)
??bigrquery
con <- dbConnect(
bigrquery::bigquery(),
project = "publicdata",
dataset = "samples",
billing = 'st558-hw4-part2'
)
con <- dbConnect(
bigrquery::bigquery(),
project = "publicdata",
dataset = "samples",
billing = 'st558-hw4-part2'
)
#install the devtools package is you haven't already
# install.packages("devtools")
# install.packages("bigrquery")
devtools::install_github("r-dbi/bigrquery")
dblists()
dbListTables(con)
dbListTables(con)
dbListTables(con)
rmarkdown::render("_Rmd/2021-09-10-Programming_Background.Rmd",
output_format = "github_document",
output_dir = "_posts/",
output_options = list(
html_preview = FALSE)
)
library(tidyverse)
getwd()
?readr
?read_delim
?read_table
# this is a tab delimited file, with character strings in quotes
# ERROR: Need to remove
breast_cancer <- read_delim("C:/Users/jolop/OneDrive/Desktop/Fall21/ST558/Homework/HW4/BreastCancer.dat",
delim = "\t",
col_names = TRUE)
# making sure the data set looks okay
view(breast_cancer)
rmarkdown::render("_Rmd/2021-09-10-Programming_Background.Rmd",
output_format = "github_document",
output_dir = "_posts/",
output_options = list(
html_preview = FALSE)
)
library(tidyverse)
# the data file has & as a delimiter
mosquitoData <- read_delim("C:/Users/jolop/OneDrive/Desktop/Fall21/ST558/Homework/HW4/mosquito.txt",
delim = "&",
col_names = TRUE)
view(mosquitoData)
# the data file has & as a delimiter
col_Mosquito<-colnames(mosquitoData)
mosquitoData2 <- print(read_table2("C:/Users/jolop/OneDrive/Desktop/Fall21/ST558/Homework/HW4/mosquito2.txt",
col_names = col_Mosquito), quote = FALSE)
View(mosquitoData2)
mosquitoData2 <- read_table2("C:/Users/jolop/OneDrive/Desktop/Fall21/ST558/Homework/HW4/mosquito2.txt",
col_names = col_Mosquito, quote = "\"")
mosquitoData2 <- read_delim("C:/Users/jolop/OneDrive/Desktop/Fall21/ST558/Homework/HW4/mosquito2.txt",
col_names = col_Mosquito, quote = "\"")
gsub('[\"]', '', mosquitoData2)
try<-gsub('[\"]', '', mosquitoData2)
print(mosquitoData2, quote=FALSE)
mosquitoData2 <- print(("C:/Users/jolop/OneDrive/Desktop/Fall21/ST558/Homework/HW4/mosquito2.txt",
mosquitoData2 <- print(read_delim("C:/Users/jolop/OneDrive/Desktop/Fall21/ST558/Homework/HW4/mosquito2.txt",
col_names = col_Mosquito), quote=FALSE)
?rbind
?bind_rows
mosquitoFullData <- rbind(mosquitoData, mosquitoData2)
view(mosquitoFullData)
?if_else
mosquitoFullData <- mosquitoFullData %>% mutate(Lifespan = if_else(Response < 20, "short",
if_else(Response <= 40, "medium", "long")))
view(mosquitoFullData)
?write.tibble
?write.csv
getwd()
write.csv(mosquitoFullData, file = "mosquitoFullData.csv")
getwd()
effortData <- read_dta("effort.dta")
getwd()
effortData <- read_dta("/effort.dta")
library(haven)
effortData <- read_dta("/effort.dta")
effortData <- read_dta("../HW4/effort.dta")
sheepData <- read_csv("../HW4/Chickens.csv")
sheepData <- read_csv("/Chickens.csv")
sheepData <- read_csv("C:/Users/jolop/OneDrive/Desktop/Fall21/ST558/Homework/HW4/Chickens.csv", 2)
sheepData <- read_csv("C:/Users/jolop/OneDrive/Desktop/Fall21/ST558/Homework/HW4/Chickens.csv", 2)
sheepData <- read_csv("C:/Users/jolop/OneDrive/Desktop/Fall21/ST558/Homework/HW4/Chickens.xlsx", 2)
sheepData <- read_csv("C:/Users/jolop/OneDrive/Desktop/Fall21/ST558/Homework/HW4/Chickens.xlsx")
?read_csv
# ?read_csv
?read_excel
sheepData <- read_excel("C:/Users/jolop/OneDrive/Desktop/Fall21/ST558/Homework/HW4/Chickens.xlsx")
library(readxl)
sheepData <- read_excel("C:/Users/jolop/OneDrive/Desktop/Fall21/ST558/Homework/HW4/Chickens.xlsx")
sheepData <- read_excel("C:/Users/jolop/OneDrive/Desktop/Fall21/ST558/Homework/HW4/Chickens.xlsx", 2)
view(sheepData)
#install the devtools package is you haven't already
# install.packages("devtools")
# install.packages("bigrquery")
library(usethis)
library(devtools)
library(bigrquery)
library(DBI)
??bigrquery
con <- dbConnect(
bigrquery::bigquery(),
project = "publicdata",
dataset = "samples",
billing = 'st558-hw4-part2'
)
dbListTables(con)''
dbListTables(con)
?dbgetQuery()
#install the devtools package is you haven't already
# install.packages("devtools")
# install.packages("bigrquery")
library(tidyverse)
?dbGetQuery
dbConnect()
library(dbplyr)
con <- dbConnect(
bigrquery::bigquery(),
project = "publicdata",
dataset = "samples",
billing = 'st558-hw4-part2'
)
dbListTables(con)
store<-dbListTables(con)
store
store$github_nested
store$"github_nested"
dbGetQuery(con, "wikipedia")
dbGetQuery(con, "SELECT * FROM  wikipediaLIMIT 10")
dbGetQuery(con, "SELECT * FROM  wikipedia LIMIT 10")
?copy_to()
?head()
wikipedia <- tbl(con, "wikipedia")
head(tbl(con, "wikipedia"), 10)
dbDisconnect(con)
library(DBI)
library(RSQLite)
library(tidyverse)
db <- dbConnect(
RSQLite::SQLite(),
'chinook/chinook.db'
)
db <- dbConnect(
RSQLite::SQLite("chinook/chinook.db"),
)
getwd()
db <- dbConnect(
RSQLite::SQLite(),
"/chinook.db"
)
db <- dbConnect(
RSQLite::SQLite(),
"chinook.db"
)
dbListTables(db)
tbl(db, "playlist_track")
invoices <- tbl(db, "invoices")
customers <- tbl(db, "customers")
view(invoices)
view(customers)
?inner_join()
innter_join(x = invoices, y = customers, by = CustomerId)
inner_join(x = invoices, y = customers, by = CustomerId)
inner_join(x = invoices, y = customers, by = "CustomerId")
CustInvoices <- inner_join(x = invoices, y = customers, by = "CustomerId")
view(CustInvoices)
library(httr)
library(jsonlite)
# API KEY: 70a71d6e776c429ab5be27217fbc2cff
?get()
GET(https://newsapi.org/v2/everything?q=bitcoin&apiKey=70a71d6e776c429ab5be27217fbc2cff)
GET(https:/newsapi.org/v2/everything?q=bitcoin&apiKey=70a71d6e776c429ab5be27217fbc2cff)
GET(https:\newsapi.org\v2\everything?q=bitcoin&apiKey=70a71d6e776c429ab5be27217fbc2cff)
GET(https:/newsapi.org/v2/everything?q=apple&from=2021-09-11&to=2021-09-11&sortBy=popularity&apiKey=70a71d6e776c429ab5be27217fbc2cff)
GET("http://newsapi.org/v2/everything?qlnTitle=Flooding&from=2021-08-10&language=en&
apiKey=70a71d6e776c429ab5be27217fbc2cff")
GET("http://newsapi.org/v2/everything?qlnTitle=Flooding&from=2021-09-01&language=en&
apiKey=70a71d6e776c429ab5be27217fbc2cff")
GET("https://newsapi.org/v2/top-headlines?country=us&category=business&apiKey=70a71d6e776c429ab5be27217fbc2cff")
TopUSArticles<-GET("https://newsapi.org/v2/top-headlines?country=us&category=business&apiKey=70a71d6e776c429ab5be27217fbc2cff")
spec(TopUSArticles, max.level=1)
?spec
fromJSON(TopUSArticles, max.level=1)
?fromJSON
View(TopUSArticles)
str(TopUSArticles, max.level=1)
TopUSArticles<-GET("http://newsapi.org/v2/everything?qlnTitle=Hurricane&from=2021-08-19&language=en&
apiKey=70a71d6e776c429ab5be27217fbc2cff")
TopUSArticles<-GET("https://newsapi.org/v2/everything?q=hurricane&from=2021-09-11&to=2021-09-11&sortBy=popularity&apiKey=70a71d6e776c429ab5be27217fbc2cff")
str(TopUSArticles, max.level=1)
?rawToChar()
?content()
TopUSArticles<-GET("https://newsapi.org/v2/everything?q=covid&from=2021-09-11&to=2021-09-11&sortBy=popularity&apiKey=70a71d6e776c429ab5be27217fbc2cff")
CovidArticles<-GET("https://newsapi.org/v2/everything?q=covid&from=2021-09-11&to=2021-09-11&sortBy=popularity&apiKey=70a71d6e776c429ab5be27217fbc2cff")
str(CovidArticles, max.level=1)
CovidArticles$content
CovidArticles<-GET("https://newsapi.org/v2/everything?q=covid&from=2021-09-11&to=2021-09-11&sortBy=popularity&apiKey=70a71d6e776c429ab5be27217fbc2cff")
str(CovidArticles, max.level=1)
CovidArticles$status_code
str(CovidArticles, max.level=1)
CovidArticles$handle
Recipes<-GET("https://newsapi.org/v2/everything?q=recipe&from=2021-09-11&to=2021-09-11&sortBy=popularity&apiKey=70a71d6e776c429ab5be27217fbc2cff")
str(Recipes, max.level=1)
Recipes$request
str(Recipes, max.level=1)
str(Recipes, max.level=1)
recipe <- content(Recipes,"text")
recipe_text <- fromJSON((rawToChar(content(Recipes,"text"))))
recipe_text <- fromJSON(content(Recipes,"text"), flatten = TRUE)
recipe_text <-rawToChar(Recipes,"content")
?rawToChar
recipe_text <-rawToChar(Recipes$content)
recipe_df <- fromJSON(recipe_text)
str(recipe_df)
rmarkdown::render("_Rmd/2021-09-10-Programming_Background.Rmd",
output_format = "github_document",
output_dir = "_posts/",
output_options = list(
html_preview = FALSE)
)
rmarkdown::render("_Rmd/2021-09-10-Programming_Background.Rmd",
output_format = "github_document",
output_dir = "_posts/",
output_options = list(
html_preview = FALSE)
)
rmarkdown::render("_Rmd/2021-09-10-Programming_Background.Rmd",
output_format = "github_document",
output_dir = "_posts/",
output_options = list(
html_preview = FALSE)
)
rmarkdown::render("_Rmd/2021-09-10-Programming_Background.Rmd",
output_format = "github_document",
output_dir = "_posts/",
output_options = list(
html_preview = FALSE)
)
rmarkdown::render("_Rmd/2021-09-10-Programming_Background.Rmd",
output_format = "github_document",
output_dir = "_posts/",
output_options = list(
html_preview = FALSE)
)
source('C:/Users/jolop/OneDrive/Desktop/Fall21/ST558/sammhunter.github.io/render.R', echo=TRUE)
# Used to read the .dat and .xlsm files
library(tidyverse)
# readr that imports excel sheets
library(readxl)
# Use to read the stata file
library(haven)
# Libraries for part 2
library(usethis)
library(devtools)
library(bigrquery)
library(DBI)
library(dbplyr)
library(RSQLite)
# I need these libraries for pulling from the news API (part 3)
library(httr)
library(jsonlite)
# the data file with '&' as a delimiter and column names
mosquitoData <- read_delim("mosquito.txt",
delim = "&",
col_names = TRUE)
# view(mosquitoData)
# taking the column names from mosquitoData
col_Mosquito<-colnames(mosquitoData)
# reading in the fixed width data file & copying the column names over
# quote = FALSE strips quotes within the print function
mosquitoData2 <- print(read_delim("mosquito2.txt",
col_names = col_Mosquito), quote=FALSE)
#view(mosquitoData2)
#?rbind
#?bind_rows
# combining the mosquito data sets by stacking their rows
mosquitoFullData <- rbind(mosquitoData, mosquitoData2)
# view(mosquitoFullData)
View(mosquitoFullData)
View(mosquitoFullData)
#?if_else
# Adding two values regarding the lifespan of the mosquitos
str(mosquitoFullData)
mosquitoFullData <- mosquitoFullData %>% mutate(
Lifespan = if_else(Response < 20, "short",
if_else(Response <= 40, "medium", "long"),
Hours = Day*24)
)
mosquitoFullData <- mosquitoFullData %>% mutate(
#Lifespan = if_else(Response < 20, "short",
#  if_else(Response <= 40, "medium", "long"),
Hours = Day*24)
mosquitoFullData
mutate(Hours = Day*24,
mosquitoFullData <- mosquitoFullData %>%
mutate(Hours = Day*24,
Lifespan = if_else(Response < 20, "short",
if_else(Response <= 40, "medium", "long")
)
)
mosquitoFullData <- mosquitoFullData %>%
mosquitoFullData <- mosquitoFullData %>%
mutate(Hours = Day*24,
Lifespan = if_else(Response < 20, "short",
if_else(Response <= 40, "medium", "long"))
)
rmarkdown::render("_Rmd/2021-09-10-Programming_Background.Rmd",
output_format = "github_document",
output_dir = "_posts/",
output_options = list(
html_preview = FALSE)
)
# ?read_csv
# ?read_excel
# Reading in the second sheet of our chickens excel file
sheepData <- read_excel("Chickens.xlsx", 2)
(sheepData)
# this function lives in tidyverse
# ?dbgetQuery()
# pulling the table from the database using SQL
dbGetQuery(con, "SELECT * FROM  wikipedia LIMIT 10")
# install the devtools package is you haven't already
# install.packages("devtools")
# install.packages("bigrquery")
# ??bigrquery
# here we are storing our connection to my project area in the
# BigQuery database (sandbox)
con <- dbConnect(
bigrquery::bigquery(),
project = "publicdata",
dataset = "samples",
billing = 'st558-hw4-part2'
)
# this function lives in tidyverse
# ?dbgetQuery()
# pulling the table from the database using SQL
dbGetQuery(con, "SELECT * FROM  wikipedia LIMIT 10")
# ?copy_to()
# ?head()
# using a dbplyr function to return a table from the database
head(tbl(con, "wikipedia"), 10)
# GPP: Disconnect from your session
dbDisconnect(con)
# checking to see where R is pointed
getwd()
# connect to the local chinook database
db <- dbConnect(
RSQLite::SQLite(),
"chinook.db"
)
# printing the available tables within the database
dbListTables(db)
# We can see that Recipes is a list
str(Recipes, max.level=1)
# API KEY: 70a71d6e776c429ab5be27217fbc2cff
# ?get()
# Here I am querying articles about recipes since 09-11-2021
Recipes<-GET("https://newsapi.org/v2/everything?q=recipe&from=2021-09-11&to=2021-09-11&sortBy=popularity&apiKey=70a71d6e776c429ab5be27217fbc2cff")
# We can see that Recipes is a list
str(Recipes, max.level=1)
rmarkdown::render("_Rmd/2021-09-10-Programming_Background.Rmd",
output_format = "github_document",
output_dir = "_posts/",
output_options = list(
html_preview = FALSE)
)
source('C:/Users/jolop/OneDrive/Desktop/Fall21/ST558/sammhunter.github.io/render.R', echo=TRUE)
rmarkdown::render("_Rmd/2021-09-10-Programming_Background.Rmd",
output_format = "github_document",
output_dir = "_posts/",
output_options = list(
html_preview = FALSE)
)
library(usethis)
library(tidyverse)
# use_git_config(user.name = "SammHunter", user.email = "shunter2@ncsu.edu")
# getwd()
# knitr::fig_chunk("plot")
knitr::opts_chunk$set(fig.path = "../images/")
# knitr::fig_chunk("plot")
rmarkdown::render("_Rmd/2021-09-10-Programming_Background.Rmd",
output_format = "github_document",
output_dir = "_posts/",
output_options = list(
html_preview = FALSE)
)
source('C:/Users/jolop/OneDrive/Desktop/Fall21/ST558/sammhunter.github.io/render.R', echo=TRUE)
rmarkdown::render("_Rmd/2021-09-10-Programming_Background.Rmd",
output_format = "github_document",
output_dir = "_posts/",
output_options = list(
html_preview = FALSE)
)
rmarkdown::render("_Rmd/2021-09-10-Programming_Background.Rmd",
output_format = "github_document",
output_dir = "_posts/",
output_options = list(
html_preview = FALSE)
)
source('C:/Users/jolop/OneDrive/Desktop/Fall21/ST558/sammhunter.github.io/render.R', echo=TRUE)
rmarkdown::render("_Rmd/2021-09-14-Programming-Background.Rmd",
output_format = "github_document",
output_dir = "_posts/",
output_options = list(
html_preview = FALSE)
)
rmarkdown::render("_Rmd/2021-09-14-Programming-Background.Rmd",
output_format = "github_document",
output_dir = "_posts/",
output_options = list(
html_preview = FALSE)
)
rmarkdown::render("_Rmd/2021-09-14-Programming-Background.Rmd",
output_format = "github_document",
output_dir = "_posts/",
output_options = list(
html_preview = FALSE)
)
rmarkdown::render("_Rmd/2021-09-14-Programming-Background.Rmd",
output_format = "github_document",
output_dir = "_posts/",
output_options = list(
html_preview = FALSE)
)
rmarkdown::render("_Rmd/2021-09-14-Programming-Background.Rmd",
output_format = "github_document",
output_dir = "_posts/",
output_options = list(
html_preview = FALSE)
)
